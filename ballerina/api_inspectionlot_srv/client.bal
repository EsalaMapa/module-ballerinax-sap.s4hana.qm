// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# 
# 
# In the SAP system, you process quality inspections on the basis of inspection lots. The data relating to a quality inspection is grouped into several entities. With this service it is possible, for example, to update inspection lot header data or to create inspection results and usage decisions.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl) returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Creates a stock posting for an inspection lot in the form of a material document item.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InspLotMatlDocItem(CreateA_InspLotMatlDocItem payload, map<string|string[]> headers = {}) returns A_InspLotMatlDocItemWrapper|error {
        string resourcePath = string `/A_InspLotMatlDocItem`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a usage decision.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InspLotUsageDecision(CreateA_InspLotUsageDecision payload, map<string|string[]> headers = {}) returns A_InspLotUsageDecisionWrapper|error {
        string resourcePath = string `/A_InspLotUsageDecision`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Not supported.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InspSampleResult(CreateA_InspSampleResult payload, map<string|string[]> headers = {}) returns A_InspSampleResultWrapper|error {
        string resourcePath = string `/A_InspSampleResult`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an inspection lot.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InspectionLot(CreateA_InspectionLot payload, map<string|string[]> headers = {}) returns A_InspectionLotWrapper|error {
        string resourcePath = string `/A_InspectionLot`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a summarized inspection result.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InspectionResult(CreateA_InspectionResult payload, map<string|string[]> headers = {}) returns A_InspectionResultWrapper|error {
        string resourcePath = string `/A_InspectionResult`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Not supported.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InspectionResultValue(CreateA_InspectionResultValue payload, map<string|string[]> headers = {}) returns A_InspectionResultValueWrapper|error {
        string resourcePath = string `/A_InspectionResultValue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates an inspection point and related inspection point characteristics.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InspectionSubset(CreateA_InspectionSubset payload, map<string|string[]> headers = {}) returns A_InspectionSubsetWrapper|error {
        string resourcePath = string `/A_InspectionSubset`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Triggers the automatic valuation of an inspection point.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success 
    remote isolated function createA_InspectionSubsetTrigger_valuation(map<string|string[]> headers = {}, *CreateA_InspectionSubsetTrigger_valuationQueries queries) returns A_InspectionSubsetWrapper|error {
        string resourcePath = string `/A_InspectionSubsetTrigger_valuation`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a single inspection result for an inspection characteristic.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionCharacteristic - Inspection Characteristic Number
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createInspResultValueOfA_InspectionCharacteristic(string InspectionLot, string InspPlanOperationInternalID, string InspectionCharacteristic, CreateA_InspectionResultValue payload, map<string|string[]> headers = {}) returns A_InspectionResultValueWrapper|error {
        string resourcePath = string `/A_InspectionCharacteristic(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionCharacteristic='${getEncodedUri(InspectionCharacteristic)}')/to_InspResultValue`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a summarized inspection result for an inspection characteristic of an inspection point.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionCharacteristic - Inspection Characteristic Number
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createInspSmplResultOfA_InspectionCharacteristic(string InspectionLot, string InspPlanOperationInternalID, string InspectionCharacteristic, CreateA_InspSampleResult payload, map<string|string[]> headers = {}) returns A_InspSampleResultWrapper|error {
        string resourcePath = string `/A_InspectionCharacteristic(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionCharacteristic='${getEncodedUri(InspectionCharacteristic)}')/to_InspSmplResult`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Reads a specific stock posting for an inspection lot.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspLotMatlDocItem - Internal Counter for DB Objects
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspLotMatlDocItem(string InspectionLot, string InspLotMatlDocItem, map<string|string[]> headers = {}, *GetA_InspLotMatlDocItemQueries queries) returns A_InspLotMatlDocItemWrapper|error {
        string resourcePath = string `/A_InspLotMatlDocItem(InspectionLot='${getEncodedUri(InspectionLot)}',InspLotMatlDocItem='${getEncodedUri(InspLotMatlDocItem)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads information on a specific serial number for a stock posting for an inspection lot.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspLotMatlDocItem - Internal Counter for DB Objects
    # + Equipment - Equipment Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspLotMatlDocItmSrlNmbr(string InspectionLot, string InspLotMatlDocItem, string Equipment, map<string|string[]> headers = {}, *GetA_InspLotMatlDocItmSrlNmbrQueries queries) returns A_InspLotMatlDocItmSrlNmbrWrapper|error {
        string resourcePath = string `/A_InspLotMatlDocItmSrlNmbr(InspectionLot='${getEncodedUri(InspectionLot)}',InspLotMatlDocItem='${getEncodedUri(InspLotMatlDocItem)}',Equipment='${getEncodedUri(Equipment)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific serial number for an inspection lot.
    #
    # + InspectionLot - Inspection Lot Number
    # + SerialNumber - Serial Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspLotSerialNumber(string InspectionLot, string SerialNumber, map<string|string[]> headers = {}, *GetA_InspLotSerialNumberQueries queries) returns A_InspLotSerialNumberWrapper|error {
        string resourcePath = string `/A_InspLotSerialNumber(InspectionLot='${getEncodedUri(InspectionLot)}',SerialNumber='${getEncodedUri(SerialNumber)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific usage decision for an inspection lot.
    #
    # + InspectionLot - Inspection Lot Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspLotUsageDecision(string InspectionLot, map<string|string[]> headers = {}, *GetA_InspLotUsageDecisionQueries queries) returns A_InspLotUsageDecisionWrapper|error {
        string resourcePath = string `/A_InspLotUsageDecision('${getEncodedUri(InspectionLot)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific inspection characteristic of an inspection point.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionCharacteristic - Inspection Characteristic Number
    # + InspectionSubsetInternalID - Inspection Sample Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspSampleCharacteristic(string InspectionLot, string InspPlanOperationInternalID, string InspectionCharacteristic, string InspectionSubsetInternalID, map<string|string[]> headers = {}, *GetA_InspSampleCharacteristicQueries queries) returns A_InspSampleCharacteristicWrapper|error {
        string resourcePath = string `/A_InspSampleCharacteristic(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionCharacteristic='${getEncodedUri(InspectionCharacteristic)}',InspectionSubsetInternalID='${getEncodedUri(InspectionSubsetInternalID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific summarized inspection result recorded for an inspection point.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionCharacteristic - Inspection Characteristic Number
    # + InspectionSubsetInternalID - Number of Partial Sample
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspSampleResult(string InspectionLot, string InspPlanOperationInternalID, string InspectionCharacteristic, string InspectionSubsetInternalID, map<string|string[]> headers = {}, *GetA_InspSampleResultQueries queries) returns A_InspSampleResultWrapper|error {
        string resourcePath = string `/A_InspSampleResult(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionCharacteristic='${getEncodedUri(InspectionCharacteristic)}',InspectionSubsetInternalID='${getEncodedUri(InspectionSubsetInternalID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific inspection characteristic.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionCharacteristic - Inspection Characteristic Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspectionCharacteristic(string InspectionLot, string InspPlanOperationInternalID, string InspectionCharacteristic, map<string|string[]> headers = {}, *GetA_InspectionCharacteristicQueries queries) returns A_InspectionCharacteristicWrapper|error {
        string resourcePath = string `/A_InspectionCharacteristic(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionCharacteristic='${getEncodedUri(InspectionCharacteristic)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads the header data of a specific inspection lot.
    #
    # + InspectionLot - Inspection Lot Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspectionLot(string InspectionLot, map<string|string[]> headers = {}, *GetA_InspectionLotQueries queries) returns A_InspectionLotWrapper|error {
        string resourcePath = string `/A_InspectionLot('${getEncodedUri(InspectionLot)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads inspection lot status information by its key.
    #
    # + InspectionLot - Inspection Lot Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspectionLotWithStatus(string InspectionLot, map<string|string[]> headers = {}, *GetA_InspectionLotWithStatusQueries queries) returns A_InspectionLotWithStatusWrapper|error {
        string resourcePath = string `/A_InspectionLotWithStatus('${getEncodedUri(InspectionLot)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific inspection operation.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspectionOperation(string InspectionLot, string InspPlanOperationInternalID, map<string|string[]> headers = {}, *GetA_InspectionOperationQueries queries) returns A_InspectionOperationWrapper|error {
        string resourcePath = string `/A_InspectionOperation(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific summarized inspection result for an inspection characteristic.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionCharacteristic - Inspection Characteristic Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspectionResult(string InspectionLot, string InspPlanOperationInternalID, string InspectionCharacteristic, map<string|string[]> headers = {}, *GetA_InspectionResultQueries queries) returns A_InspectionResultWrapper|error {
        string resourcePath = string `/A_InspectionResult(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionCharacteristic='${getEncodedUri(InspectionCharacteristic)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific single inspection result value.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionCharacteristic - Inspection Characteristic Number
    # + InspResultValueInternalID - Number of Individual Result
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspectionResultValue(string InspectionLot, string InspPlanOperationInternalID, string InspectionCharacteristic, string InspResultValueInternalID, map<string|string[]> headers = {}, *GetA_InspectionResultValueQueries queries) returns A_InspectionResultValueWrapper|error {
        string resourcePath = string `/A_InspectionResultValue(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionCharacteristic='${getEncodedUri(InspectionCharacteristic)}',InspResultValueInternalID='${getEncodedUri(InspResultValueInternalID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific inspection point.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionSubsetInternalID - Sample Number (Based on an Inspection Point)
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspectionSubset(string InspectionLot, string InspPlanOperationInternalID, string InspectionSubsetInternalID, map<string|string[]> headers = {}, *GetA_InspectionSubsetQueries queries) returns A_InspectionSubsetWrapper|error {
        string resourcePath = string `/A_InspectionSubset(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionSubsetInternalID='${getEncodedUri(InspectionSubsetInternalID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads status information for an inspection lot.
    #
    # + InspectionLot - Inspection Lot Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getInspectionLotWithStatusOfA_InspectionLot(string InspectionLot, map<string|string[]> headers = {}, *GetInspectionLotWithStatusOfA_InspectionLotQueries queries) returns A_InspectionLotWithStatusWrapper|error {
        string resourcePath = string `/A_InspectionLot('${getEncodedUri(InspectionLot)}')/to_InspectionLotWithStatus`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads stock postings for inspection lots in the form of material document items.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspLotMatlDocItems(map<string|string[]> headers = {}, *ListA_InspLotMatlDocItemsQueries queries) returns CollectionOfA_InspLotMatlDocItemWrapper|error {
        string resourcePath = string `/A_InspLotMatlDocItem`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads information on serial numbers for stock postings for inspection lots.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspLotMatlDocItmSrlNmbrs(map<string|string[]> headers = {}, *ListA_InspLotMatlDocItmSrlNmbrsQueries queries) returns CollectionOfA_InspLotMatlDocItmSrlNmbrWrapper|error {
        string resourcePath = string `/A_InspLotMatlDocItmSrlNmbr`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads serial numbers for inspection lots.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspLotSerialNumbers(map<string|string[]> headers = {}, *ListA_InspLotSerialNumbersQueries queries) returns CollectionOfA_InspLotSerialNumberWrapper|error {
        string resourcePath = string `/A_InspLotSerialNumber`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads usage decisions made for inspection lots.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspLotUsageDecisions(map<string|string[]> headers = {}, *ListA_InspLotUsageDecisionsQueries queries) returns CollectionOfA_InspLotUsageDecisionWrapper|error {
        string resourcePath = string `/A_InspLotUsageDecision`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads inspection characteristics of inspection points.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspSampleCharacteristics(map<string|string[]> headers = {}, *ListA_InspSampleCharacteristicsQueries queries) returns CollectionOfA_InspSampleCharacteristicWrapper|error {
        string resourcePath = string `/A_InspSampleCharacteristic`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads summarized inspection results recorded for inspection points.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspSampleResults(map<string|string[]> headers = {}, *ListA_InspSampleResultsQueries queries) returns CollectionOfA_InspSampleResultWrapper|error {
        string resourcePath = string `/A_InspSampleResult`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads inspection characteristics.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspectionCharacteristics(map<string|string[]> headers = {}, *ListA_InspectionCharacteristicsQueries queries) returns CollectionOfA_InspectionCharacteristicWrapper|error {
        string resourcePath = string `/A_InspectionCharacteristic`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads inspection lot status information.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspectionLotWithStatuses(map<string|string[]> headers = {}, *ListA_InspectionLotWithStatusesQueries queries) returns CollectionOfA_InspectionLotWithStatusWrapper|error {
        string resourcePath = string `/A_InspectionLotWithStatus`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads inspection lots with data at header level.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspectionLots(map<string|string[]> headers = {}, *ListA_InspectionLotsQueries queries) returns CollectionOfA_InspectionLotWrapper|error {
        string resourcePath = string `/A_InspectionLot`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads inspection operations.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspectionOperations(map<string|string[]> headers = {}, *ListA_InspectionOperationsQueries queries) returns CollectionOfA_InspectionOperationWrapper|error {
        string resourcePath = string `/A_InspectionOperation`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads single inspection result values.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspectionResultValues(map<string|string[]> headers = {}, *ListA_InspectionResultValuesQueries queries) returns CollectionOfA_InspectionResultValueWrapper|error {
        string resourcePath = string `/A_InspectionResultValue`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads summarized inspection results.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspectionResults(map<string|string[]> headers = {}, *ListA_InspectionResultsQueries queries) returns CollectionOfA_InspectionResultWrapper|error {
        string resourcePath = string `/A_InspectionResult`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads inspection points.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspectionSubsets(map<string|string[]> headers = {}, *ListA_InspectionSubsetsQueries queries) returns CollectionOfA_InspectionSubsetWrapper|error {
        string resourcePath = string `/A_InspectionSubset`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific stock posting with serial numbers posted for an inspection lot.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspLotMatlDocItem - Internal Counter for DB Objects
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listInspLotMatlDocItmSrlNmbrsOfA_InspLotMatlDocItem(string InspectionLot, string InspLotMatlDocItem, map<string|string[]> headers = {}, *ListInspLotMatlDocItmSrlNmbrsOfA_InspLotMatlDocItemQueries queries) returns CollectionOfA_InspLotMatlDocItmSrlNmbrWrapper|error {
        string resourcePath = string `/A_InspLotMatlDocItem(InspectionLot='${getEncodedUri(InspectionLot)}',InspLotMatlDocItem='${getEncodedUri(InspLotMatlDocItem)}')/to_InspLotMatlDocItmSrlNmbr`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads single inspection results for an inspection characteristic.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionCharacteristic - Inspection Characteristic Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listInspResultValuesOfA_InspectionCharacteristic(string InspectionLot, string InspPlanOperationInternalID, string InspectionCharacteristic, map<string|string[]> headers = {}, *ListInspResultValuesOfA_InspectionCharacteristicQueries queries) returns CollectionOfA_InspectionResultValueWrapper|error {
        string resourcePath = string `/A_InspectionCharacteristic(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionCharacteristic='${getEncodedUri(InspectionCharacteristic)}')/to_InspResultValue`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a summarized inspection result for an inspection characteristic of an inspection point.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionCharacteristic - Inspection Characteristic Number
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listInspSmplResultsOfA_InspectionCharacteristic(string InspectionLot, string InspPlanOperationInternalID, string InspectionCharacteristic, map<string|string[]> headers = {}, *ListInspSmplResultsOfA_InspectionCharacteristicQueries queries) returns CollectionOfA_InspSampleResultWrapper|error {
        string resourcePath = string `/A_InspectionCharacteristic(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionCharacteristic='${getEncodedUri(InspectionCharacteristic)}')/to_InspSmplResult`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Updates a specific usage decision for an inspection lot.
    #
    # + InspectionLot - Inspection Lot Number
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InspLotUsageDecision(string InspectionLot, Modified\ A_InspLotUsageDecisionType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspLotUsageDecision('${getEncodedUri(InspectionLot)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a specific summarized inspection result recorded for an inspection point.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionCharacteristic - Inspection Characteristic Number
    # + InspectionSubsetInternalID - Number of Partial Sample
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InspSampleResult(string InspectionLot, string InspPlanOperationInternalID, string InspectionCharacteristic, string InspectionSubsetInternalID, Modified\ A_InspSampleResultType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspSampleResult(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionCharacteristic='${getEncodedUri(InspectionCharacteristic)}',InspectionSubsetInternalID='${getEncodedUri(InspectionSubsetInternalID)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates the header data of a specific inspection lot.
    #
    # + InspectionLot - Inspection Lot Number
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InspectionLot(string InspectionLot, Modified\ A_InspectionLotType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspectionLot('${getEncodedUri(InspectionLot)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a specific summarized inspection result for an inspection characteristic.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionCharacteristic - Inspection Characteristic Number
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InspectionResult(string InspectionLot, string InspPlanOperationInternalID, string InspectionCharacteristic, Modified\ A_InspectionResultType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspectionResult(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionCharacteristic='${getEncodedUri(InspectionCharacteristic)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a specific single inspection result value.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionCharacteristic - Inspection Characteristic Number
    # + InspResultValueInternalID - Number of Individual Result
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InspectionResultValue(string InspectionLot, string InspPlanOperationInternalID, string InspectionCharacteristic, string InspResultValueInternalID, Modified\ A_InspectionResultValueType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspectionResultValue(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionCharacteristic='${getEncodedUri(InspectionCharacteristic)}',InspResultValueInternalID='${getEncodedUri(InspResultValueInternalID)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a specific inspection point.
    #
    # + InspectionLot - Inspection Lot Number
    # + InspPlanOperationInternalID - Current Node Number from Order Counter
    # + InspectionSubsetInternalID - Sample Number (Based on an Inspection Point)
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InspectionSubset(string InspectionLot, string InspPlanOperationInternalID, string InspectionSubsetInternalID, Modified\ A_InspectionSubsetType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspectionSubset(InspectionLot='${getEncodedUri(InspectionLot)}',InspPlanOperationInternalID='${getEncodedUri(InspPlanOperationInternalID)}',InspectionSubsetInternalID='${getEncodedUri(InspectionSubsetInternalID)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Send a group of requests
    #
    # + headers - Headers to be sent with the request 
    # + request - Batch request 
    # + return - Batch response 
    remote isolated function performBatchOperation(http:Request request, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/$batch`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
