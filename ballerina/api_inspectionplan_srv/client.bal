// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;
import ballerinax/sap;

#

#

# Inspection plans help you to describe how a quality inspection of one or several materials is to take place. In the inspection plan, you define the sequence of inspection operations and the range of specifications available for inspecting inspection characteristics.
public isolated client class Client {
    final sap:Client clientEp;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string hostname, int port = 443) returns error? {
        string serviceUrl = string `https://${hostname}:${port}/sap/opu/odata/sap/API_INSPECTIONPLAN_SRV`;
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        sap:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Creates a new dependent characteristic specification in the inspection plan.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InspPlanDepdntCharc(CreateA_InspPlanDepdntCharc payload, map<string|string[]> headers = {}) returns A_InspPlanDepdntCharcWrapper|error {
        string resourcePath = string `/A_InspPlanDepdntCharc`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a new material assignment in the inspection plan.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InspPlanMaterialAssgmt(CreateA_InspPlanMaterialAssgmt payload, map<string|string[]> headers = {}) returns A_InspPlanMaterialAssgmtWrapper|error {
        string resourcePath = string `/A_InspPlanMaterialAssgmt`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a new characteristic in the inspection plan.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InspPlanOpCharacteristic(CreateA_InspPlanOpCharacteristic payload, map<string|string[]> headers = {}) returns A_InspPlanOpCharacteristicWrapper|error {
        string resourcePath = string `/A_InspPlanOpCharacteristic`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a new production resource/tool in the inspection plan.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InspPlanOpPRT(CreateA_InspPlanOpPRT payload, map<string|string[]> headers = {}) returns A_InspPlanOpPRTWrapper|error {
        string resourcePath = string `/A_InspPlanOpPRT`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a new operation in the inspection plan.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InspPlanOperation(CreateA_InspPlanOperation payload, map<string|string[]> headers = {}) returns A_InspPlanOperationWrapper|error {
        string resourcePath = string `/A_InspPlanOperation`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Creates a new inspection plan header.
    #
    # + headers - Headers to be sent with the request 
    # + payload - New entity 
    # + return - Created entity 
    remote isolated function createA_InspectionPlan(CreateA_InspectionPlan payload, map<string|string[]> headers = {}) returns A_InspectionPlanWrapper|error {
        string resourcePath = string `/A_InspectionPlan`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Deletes a specific dependent characteristic specification in the inspection plan.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + InspectionPlan - Group Counter
    # + InspectionPlanInternalVersion - Internal counter
    # + BOOOperationInternalID - Number of the Task List Node
    # + BOOOpInternalVersionCounter - Internal counter
    # + BOOCharacteristic - Inspection Characteristic Number
    # + BOOCharacteristicVersion - Internal counter
    # + BOODpndantCharcSpec - Number for Dependent Characteristic Specifications
    # + BOODpndantCharcSpecVers - Internal counter
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_InspPlanDepdntCharc(string InspectionPlanGroup, string InspectionPlan, string InspectionPlanInternalVersion, string BOOOperationInternalID, string BOOOpInternalVersionCounter, string BOOCharacteristic, string BOOCharacteristicVersion, string BOODpndantCharcSpec, string BOODpndantCharcSpecVers, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspPlanDepdntCharc(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',InspectionPlan='${getEncodedUri(InspectionPlan)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}',BOOOperationInternalID='${getEncodedUri(BOOOperationInternalID)}',BOOOpInternalVersionCounter='${getEncodedUri(BOOOpInternalVersionCounter)}',BOOCharacteristic='${getEncodedUri(BOOCharacteristic)}',BOOCharacteristicVersion='${getEncodedUri(BOOCharacteristicVersion)}',BOODpndantCharcSpec='${getEncodedUri(BOODpndantCharcSpec)}',BOODpndantCharcSpecVers='${getEncodedUri(BOODpndantCharcSpecVers)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a specific material assignment in the inspection plan.
    #
    # + Material - Material Number
    # + Plant - Plant
    # + InspectionPlanGroup - Key for Task List Group
    # + InspectionPlan - Group Counter
    # + InspPlanMatlAssignment - Counter for Additional Criteria
    # + InspPlanMatlAssgmtIntVersion - Internal counter
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_InspPlanMaterialAssgmt(string Material, string Plant, string InspectionPlanGroup, string InspectionPlan, string InspPlanMatlAssignment, string InspPlanMatlAssgmtIntVersion, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspPlanMaterialAssgmt(Material='${getEncodedUri(Material)}',Plant='${getEncodedUri(Plant)}',InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',InspectionPlan='${getEncodedUri(InspectionPlan)}',InspPlanMatlAssignment='${getEncodedUri(InspPlanMatlAssignment)}',InspPlanMatlAssgmtIntVersion='${getEncodedUri(InspPlanMatlAssgmtIntVersion)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a specific characteristic in the inspection plan.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + BOOOperationInternalID - Number of the Task List Node
    # + BOOCharacteristic - Inspection Characteristic Number
    # + BOOCharacteristicVersion - Internal counter
    # + BOOOpInternalVersionCounter - Internal counter
    # + InspectionPlanInternalVersion - Internal counter
    # + InspectionPlan - Group Counter
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_InspPlanOpCharacteristic(string InspectionPlanGroup, string BOOOperationInternalID, string BOOCharacteristic, string BOOCharacteristicVersion, string BOOOpInternalVersionCounter, string InspectionPlanInternalVersion, string InspectionPlan, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspPlanOpCharacteristic(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',BOOOperationInternalID='${getEncodedUri(BOOOperationInternalID)}',BOOCharacteristic='${getEncodedUri(BOOCharacteristic)}',BOOCharacteristicVersion='${getEncodedUri(BOOCharacteristicVersion)}',BOOOpInternalVersionCounter='${getEncodedUri(BOOOpInternalVersionCounter)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}',InspectionPlan='${getEncodedUri(InspectionPlan)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a specific production resource/tool in the inspection plan.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + InspectionPlan - Group Counter
    # + InspectionPlanInternalVersion - Internal counter
    # + BOOOpInternalVersionCounter - Internal counter
    # + BOOOperationInternalID - Number of the Task List Node
    # + BOOOperationPRTInternalID - Item Counter for Production Resources/Tools
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_InspPlanOpPRT(string InspectionPlanGroup, string InspectionPlan, string InspectionPlanInternalVersion, string BOOOpInternalVersionCounter, string BOOOperationInternalID, string BOOOperationPRTInternalID, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspPlanOpPRT(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',InspectionPlan='${getEncodedUri(InspectionPlan)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}',BOOOpInternalVersionCounter='${getEncodedUri(BOOOpInternalVersionCounter)}',BOOOperationInternalID='${getEncodedUri(BOOOperationInternalID)}',BOOOperationPRTInternalID='${getEncodedUri(BOOOperationPRTInternalID)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a specific operation in the inspection plan.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + BOOOperationInternalID - Number of the Task List Node
    # + InspectionPlanInternalVersion - Internal counter
    # + BOOOpInternalVersionCounter - Internal counter
    # + InspectionPlan - Group Counter
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_InspPlanOperation(string InspectionPlanGroup, string BOOOperationInternalID, string InspectionPlanInternalVersion, string BOOOpInternalVersionCounter, string InspectionPlan, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspPlanOperation(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',BOOOperationInternalID='${getEncodedUri(BOOOperationInternalID)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}',BOOOpInternalVersionCounter='${getEncodedUri(BOOOpInternalVersionCounter)}',InspectionPlan='${getEncodedUri(InspectionPlan)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Deletes a specific inspection plan header.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + InspectionPlan - Group Counter
    # + InspectionPlanInternalVersion - Internal counter
    # + headers - Headers to be sent with the request 
    # + return - Success 
    remote isolated function deleteA_InspectionPlan(string InspectionPlanGroup, string InspectionPlan, string InspectionPlanInternalVersion, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspectionPlan(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',InspectionPlan='${getEncodedUri(InspectionPlan)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}')`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Reads a specific dependent characteristic specification by its key.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + InspectionPlan - Group Counter
    # + InspectionPlanInternalVersion - Internal counter
    # + BOOOperationInternalID - Number of the Task List Node
    # + BOOOpInternalVersionCounter - Internal counter
    # + BOOCharacteristic - Inspection Characteristic Number
    # + BOOCharacteristicVersion - Internal counter
    # + BOODpndantCharcSpec - Number for Dependent Characteristic Specifications
    # + BOODpndantCharcSpecVers - Internal counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspPlanDepdntCharc(string InspectionPlanGroup, string InspectionPlan, string InspectionPlanInternalVersion, string BOOOperationInternalID, string BOOOpInternalVersionCounter, string BOOCharacteristic, string BOOCharacteristicVersion, string BOODpndantCharcSpec, string BOODpndantCharcSpecVers, map<string|string[]> headers = {}, *GetA_InspPlanDepdntCharcQueries queries) returns A_InspPlanDepdntCharcWrapper|error {
        string resourcePath = string `/A_InspPlanDepdntCharc(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',InspectionPlan='${getEncodedUri(InspectionPlan)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}',BOOOperationInternalID='${getEncodedUri(BOOOperationInternalID)}',BOOOpInternalVersionCounter='${getEncodedUri(BOOOpInternalVersionCounter)}',BOOCharacteristic='${getEncodedUri(BOOCharacteristic)}',BOOCharacteristicVersion='${getEncodedUri(BOOCharacteristicVersion)}',BOODpndantCharcSpec='${getEncodedUri(BOODpndantCharcSpec)}',BOODpndantCharcSpecVers='${getEncodedUri(BOODpndantCharcSpecVers)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific material assignment by its key.
    #
    # + Material - Material Number
    # + Plant - Plant
    # + InspectionPlanGroup - Key for Task List Group
    # + InspectionPlan - Group Counter
    # + InspPlanMatlAssignment - Counter for Additional Criteria
    # + InspPlanMatlAssgmtIntVersion - Internal counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspPlanMaterialAssgmt(string Material, string Plant, string InspectionPlanGroup, string InspectionPlan, string InspPlanMatlAssignment, string InspPlanMatlAssgmtIntVersion, map<string|string[]> headers = {}, *GetA_InspPlanMaterialAssgmtQueries queries) returns A_InspPlanMaterialAssgmtWrapper|error {
        string resourcePath = string `/A_InspPlanMaterialAssgmt(Material='${getEncodedUri(Material)}',Plant='${getEncodedUri(Plant)}',InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',InspectionPlan='${getEncodedUri(InspectionPlan)}',InspPlanMatlAssignment='${getEncodedUri(InspPlanMatlAssignment)}',InspPlanMatlAssgmtIntVersion='${getEncodedUri(InspPlanMatlAssgmtIntVersion)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific characteristic by its key.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + BOOOperationInternalID - Number of the Task List Node
    # + BOOCharacteristic - Inspection Characteristic Number
    # + BOOCharacteristicVersion - Internal counter
    # + BOOOpInternalVersionCounter - Internal counter
    # + InspectionPlanInternalVersion - Internal counter
    # + InspectionPlan - Group Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspPlanOpCharacteristic(string InspectionPlanGroup, string BOOOperationInternalID, string BOOCharacteristic, string BOOCharacteristicVersion, string BOOOpInternalVersionCounter, string InspectionPlanInternalVersion, string InspectionPlan, map<string|string[]> headers = {}, *GetA_InspPlanOpCharacteristicQueries queries) returns A_InspPlanOpCharacteristicWrapper|error {
        string resourcePath = string `/A_InspPlanOpCharacteristic(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',BOOOperationInternalID='${getEncodedUri(BOOOperationInternalID)}',BOOCharacteristic='${getEncodedUri(BOOCharacteristic)}',BOOCharacteristicVersion='${getEncodedUri(BOOCharacteristicVersion)}',BOOOpInternalVersionCounter='${getEncodedUri(BOOOpInternalVersionCounter)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}',InspectionPlan='${getEncodedUri(InspectionPlan)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific production resource/tool by its key.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + InspectionPlan - Group Counter
    # + InspectionPlanInternalVersion - Internal counter
    # + BOOOpInternalVersionCounter - Internal counter
    # + BOOOperationInternalID - Number of the Task List Node
    # + BOOOperationPRTInternalID - Item Counter for Production Resources/Tools
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspPlanOpPRT(string InspectionPlanGroup, string InspectionPlan, string InspectionPlanInternalVersion, string BOOOpInternalVersionCounter, string BOOOperationInternalID, string BOOOperationPRTInternalID, map<string|string[]> headers = {}, *GetA_InspPlanOpPRTQueries queries) returns A_InspPlanOpPRTWrapper|error {
        string resourcePath = string `/A_InspPlanOpPRT(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',InspectionPlan='${getEncodedUri(InspectionPlan)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}',BOOOpInternalVersionCounter='${getEncodedUri(BOOOpInternalVersionCounter)}',BOOOperationInternalID='${getEncodedUri(BOOOperationInternalID)}',BOOOperationPRTInternalID='${getEncodedUri(BOOOperationPRTInternalID)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific operation by its key.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + BOOOperationInternalID - Number of the Task List Node
    # + InspectionPlanInternalVersion - Internal counter
    # + BOOOpInternalVersionCounter - Internal counter
    # + InspectionPlan - Group Counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspPlanOperation(string InspectionPlanGroup, string BOOOperationInternalID, string InspectionPlanInternalVersion, string BOOOpInternalVersionCounter, string InspectionPlan, map<string|string[]> headers = {}, *GetA_InspPlanOperationQueries queries) returns A_InspPlanOperationWrapper|error {
        string resourcePath = string `/A_InspPlanOperation(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',BOOOperationInternalID='${getEncodedUri(BOOOperationInternalID)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}',BOOOpInternalVersionCounter='${getEncodedUri(BOOOpInternalVersionCounter)}',InspectionPlan='${getEncodedUri(InspectionPlan)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads a specific inspection plan header by its key.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + InspectionPlan - Group Counter
    # + InspectionPlanInternalVersion - Internal counter
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entity 
    remote isolated function getA_InspectionPlan(string InspectionPlanGroup, string InspectionPlan, string InspectionPlanInternalVersion, map<string|string[]> headers = {}, *GetA_InspectionPlanQueries queries) returns A_InspectionPlanWrapper|error {
        string resourcePath = string `/A_InspectionPlan(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',InspectionPlan='${getEncodedUri(InspectionPlan)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}')`;
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all the dependent characteristic specifications in the inspection plan.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspPlanDepdntCharcs(map<string|string[]> headers = {}, *ListA_InspPlanDepdntCharcsQueries queries) returns CollectionOfA_InspPlanDepdntCharcWrapper|error {
        string resourcePath = string `/A_InspPlanDepdntCharc`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all the material assignments in the inspection plan.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspPlanMaterialAssgmts(map<string|string[]> headers = {}, *ListA_InspPlanMaterialAssgmtsQueries queries) returns CollectionOfA_InspPlanMaterialAssgmtWrapper|error {
        string resourcePath = string `/A_InspPlanMaterialAssgmt`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all the characteristics in the inspection plan.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspPlanOpCharacteristics(map<string|string[]> headers = {}, *ListA_InspPlanOpCharacteristicsQueries queries) returns CollectionOfA_InspPlanOpCharacteristicWrapper|error {
        string resourcePath = string `/A_InspPlanOpCharacteristic`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all the production resources/tools in the inspection plan.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspPlanOpPRTs(map<string|string[]> headers = {}, *ListA_InspPlanOpPRTsQueries queries) returns CollectionOfA_InspPlanOpPRTWrapper|error {
        string resourcePath = string `/A_InspPlanOpPRT`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all the operations in the inspection plan.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspPlanOperations(map<string|string[]> headers = {}, *ListA_InspPlanOperationsQueries queries) returns CollectionOfA_InspPlanOperationWrapper|error {
        string resourcePath = string `/A_InspPlanOperation`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Reads all inspection plan headers.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Retrieved entities 
    remote isolated function listA_InspectionPlans(map<string|string[]> headers = {}, *ListA_InspectionPlansQueries queries) returns CollectionOfA_InspectionPlanWrapper|error {
        string resourcePath = string `/A_InspectionPlan`;
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Updates a specific dependent characteristic specification in the inspection plan.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + InspectionPlan - Group Counter
    # + InspectionPlanInternalVersion - Internal counter
    # + BOOOperationInternalID - Number of the Task List Node
    # + BOOOpInternalVersionCounter - Internal counter
    # + BOOCharacteristic - Inspection Characteristic Number
    # + BOOCharacteristicVersion - Internal counter
    # + BOODpndantCharcSpec - Number for Dependent Characteristic Specifications
    # + BOODpndantCharcSpecVers - Internal counter
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InspPlanDepdntCharc(string InspectionPlanGroup, string InspectionPlan, string InspectionPlanInternalVersion, string BOOOperationInternalID, string BOOOpInternalVersionCounter, string BOOCharacteristic, string BOOCharacteristicVersion, string BOODpndantCharcSpec, string BOODpndantCharcSpecVers, Modified\ A_InspPlanDepdntCharcType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspPlanDepdntCharc(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',InspectionPlan='${getEncodedUri(InspectionPlan)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}',BOOOperationInternalID='${getEncodedUri(BOOOperationInternalID)}',BOOOpInternalVersionCounter='${getEncodedUri(BOOOpInternalVersionCounter)}',BOOCharacteristic='${getEncodedUri(BOOCharacteristic)}',BOOCharacteristicVersion='${getEncodedUri(BOOCharacteristicVersion)}',BOODpndantCharcSpec='${getEncodedUri(BOODpndantCharcSpec)}',BOODpndantCharcSpecVers='${getEncodedUri(BOODpndantCharcSpecVers)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a specific material assignment in the inspection plan.
    #
    # + Material - Material Number
    # + Plant - Plant
    # + InspectionPlanGroup - Key for Task List Group
    # + InspectionPlan - Group Counter
    # + InspPlanMatlAssignment - Counter for Additional Criteria
    # + InspPlanMatlAssgmtIntVersion - Internal counter
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InspPlanMaterialAssgmt(string Material, string Plant, string InspectionPlanGroup, string InspectionPlan, string InspPlanMatlAssignment, string InspPlanMatlAssgmtIntVersion, Modified\ A_InspPlanMaterialAssgmtType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspPlanMaterialAssgmt(Material='${getEncodedUri(Material)}',Plant='${getEncodedUri(Plant)}',InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',InspectionPlan='${getEncodedUri(InspectionPlan)}',InspPlanMatlAssignment='${getEncodedUri(InspPlanMatlAssignment)}',InspPlanMatlAssgmtIntVersion='${getEncodedUri(InspPlanMatlAssgmtIntVersion)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a specific characteristic in the inspection plan.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + BOOOperationInternalID - Number of the Task List Node
    # + BOOCharacteristic - Inspection Characteristic Number
    # + BOOCharacteristicVersion - Internal counter
    # + BOOOpInternalVersionCounter - Internal counter
    # + InspectionPlanInternalVersion - Internal counter
    # + InspectionPlan - Group Counter
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InspPlanOpCharacteristic(string InspectionPlanGroup, string BOOOperationInternalID, string BOOCharacteristic, string BOOCharacteristicVersion, string BOOOpInternalVersionCounter, string InspectionPlanInternalVersion, string InspectionPlan, Modified\ A_InspPlanOpCharacteristicType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspPlanOpCharacteristic(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',BOOOperationInternalID='${getEncodedUri(BOOOperationInternalID)}',BOOCharacteristic='${getEncodedUri(BOOCharacteristic)}',BOOCharacteristicVersion='${getEncodedUri(BOOCharacteristicVersion)}',BOOOpInternalVersionCounter='${getEncodedUri(BOOOpInternalVersionCounter)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}',InspectionPlan='${getEncodedUri(InspectionPlan)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a specific production resource/tool in the inspection plan.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + InspectionPlan - Group Counter
    # + InspectionPlanInternalVersion - Internal counter
    # + BOOOpInternalVersionCounter - Internal counter
    # + BOOOperationInternalID - Number of the Task List Node
    # + BOOOperationPRTInternalID - Item Counter for Production Resources/Tools
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InspPlanOpPRT(string InspectionPlanGroup, string InspectionPlan, string InspectionPlanInternalVersion, string BOOOpInternalVersionCounter, string BOOOperationInternalID, string BOOOperationPRTInternalID, Modified\ A_InspPlanOpPRTType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspPlanOpPRT(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',InspectionPlan='${getEncodedUri(InspectionPlan)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}',BOOOpInternalVersionCounter='${getEncodedUri(BOOOpInternalVersionCounter)}',BOOOperationInternalID='${getEncodedUri(BOOOperationInternalID)}',BOOOperationPRTInternalID='${getEncodedUri(BOOOperationPRTInternalID)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a specific operation in the inspection plan.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + BOOOperationInternalID - Number of the Task List Node
    # + InspectionPlanInternalVersion - Internal counter
    # + BOOOpInternalVersionCounter - Internal counter
    # + InspectionPlan - Group Counter
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InspPlanOperation(string InspectionPlanGroup, string BOOOperationInternalID, string InspectionPlanInternalVersion, string BOOOpInternalVersionCounter, string InspectionPlan, Modified\ A_InspPlanOperationType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspPlanOperation(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',BOOOperationInternalID='${getEncodedUri(BOOOperationInternalID)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}',BOOOpInternalVersionCounter='${getEncodedUri(BOOOpInternalVersionCounter)}',InspectionPlan='${getEncodedUri(InspectionPlan)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Updates a specific inspection plan header.
    #
    # + InspectionPlanGroup - Key for Task List Group
    # + InspectionPlan - Group Counter
    # + InspectionPlanInternalVersion - Internal counter
    # + headers - Headers to be sent with the request 
    # + payload - New property values 
    # + return - Success 
    remote isolated function patchA_InspectionPlan(string InspectionPlanGroup, string InspectionPlan, string InspectionPlanInternalVersion, Modified\ A_InspectionPlanType payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/A_InspectionPlan(InspectionPlanGroup='${getEncodedUri(InspectionPlanGroup)}',InspectionPlan='${getEncodedUri(InspectionPlan)}',InspectionPlanInternalVersion='${getEncodedUri(InspectionPlanInternalVersion)}')`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, headers);
    }

    # Send a group of requests
    #
    # + headers - Headers to be sent with the request 
    # + request - Batch request 
    # + return - Batch response 
    remote isolated function performBatchOperation(http:Request request, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/$batch`;
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }
}
